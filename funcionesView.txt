controlador.iniciarSesion (65)
controlador.existeEmail(nombreEmail) (98)
controlador.registrarUsuario(nombreUsuario, correo, contraseña) (118)
controlador.obtenerUnidadFamiliar(usuarioActual)
controlador.unirseAUnidadFamiliar(usuarioActual, codigo) (161)
controlador.crearUnidadFamiliar(usuarioActual, nombre) (190)
controlador.obtenerTodosProductos(unidadActual) (248)
controlador.obtenerCategorias() (314)
controlador.obtenerProductosPorSubcategoria(subcategoria) (347)
controlador.obtenerMarcas() (355)
controlador.obtenerProductosPorMarca(marca) (355)
controlador.ordenarProductos(opcion) (394)
controlador.obtenerProductoPorNombre(nombre) (408)
controlador.actualizarPrecioProducto(producto, nuevoPrecio) (474)
controlador.anadirPuntuacionProducto(producto, usuarioActual, puntuacion) (474)
controlador.anadirSupermercadoProducto(producto, nuevoSuper) (532)
controlador.eliminarSupermercadoProducto(producto, supermercados.get(numEliminar-1)) (540)
controlador.obtenerCategorias() (565)
controlador.crearProducto(nombre, marca, precio, categoriaSeleccionada, subcategoriaSeleccionada, id, unidadActual) (593)
controlador.anadirSupermercadoProducto(nuevoProducto, supermercado) (605)
controlador.obtenerProductosUnidadFamiliar(unidadActual) (617)
controlador.cambiarNombreUsuario(usuarioActual, nuevoNombre) (671)
controlador.cambiarContrasena(usuarioActual, actual, nueva) (698)
controlador.cambiarNombreUnidadFamiliar(unidadActual, nuevoNombre) (722)
controlador.abandonarUnidadFamiliar(usuarioActual, unidadActual) (730)


supermercados (Mercadona, Lidl, Alcampo, Carrefour, Aldi, Eroski, Gadis, Dia, Familia, El Corte Inglés)



-Aperitivos
Aceitunas
Encurtidos
Frutos secos
Patatas fritas
Snacks salados

-Bazar y hogar
Automóvil
Baño
Bricolaje
Decoración
Jardinería
Limpieza piscinas
Menaje cocina
Papelería
Textil hogar
Utiles limpieza
Iluminación (bombillas, pilas)

-Bebés y niños
Accesorios bebé
Alimentación infantil (leches, papillas, potitos)
Higiene infantil (colonias, cremas, champús)
Pañales y toallitas
Productos premamá
Ropa infantil

-Bebidas
Aguas
Bebidas energéticas
Bebidas isotónicas
Cava y champagne
Cervezas
Licores
Refrescos
Sidras
Vinos
Zumos

-Cafés e infusiones
Cacaos
Cafés
Infusiones
Tés

-Cereales y galletas
Cereales desayuno
Galletas dulces
Galletas saladas

-Chocolates y dulces
Bombones
Chocolates
Cremas untables
Golosinas

-Congelados
Carnes congeladas
Helados
Frutas congeladas
Hielo
Panadería congelada
Pescados congelados
Platos preparados
Verduras congeladas

-Conservas y condimentos
Aceites
Caldos y sopas
Conservas cárnicas
Conservas pescado
Conservas vegetales
Especias
Salsas
Vinagres

-Dietéticos
Bebidas dietéticas
Comidas dietéticas
Complementos nutricionales

-Droguería
Ambientadores
Cuidado calzado
Cuidado ropa
Desechables (papel higiénico, servilletas)
Insecticidas
Lavavajillas
Limpieza baño
Limpieza cocina
Limpieza general
Bolsas basura

-Frescos
Carnicería
Charcutería
Frutas frescas
Huevos
Pescadería
Platos preparados frescos
Quesos
Verduras frescas

-Lácteos
Batidos
Leches
Mantequillas
Margarinas
Natas
Postres lácteos
Yogures

-Mascotas
Accesorios mascotas
Alimento aves
Alimento gatos
Alimento perros
Alimento reptiles
Alimento roedores
Acuarios y terrarios

-Panadería y repostería
Azúcares y edulcorantes
Bolleria fresca
Harinas
Pan fresco
Pastelería fresca
Productos salados
Repostería seca

-Pasta y arroz
Arroces
Legumbres cocidas
Legumbres secas
Pastas
Sémolas

-Perfumería y farmacia
Cuidado corporal
Cuidado facial
Cuidado capilar
Depilación
Desodorantes
Higiene bucal
Higiene íntima
Maquillaje
Parafarmacia
Perfumes
Productos solares



---x---
// =================================================================
// MÉTODO AUXILIAR PARA BÚSQUEDA CON SUGERENCIAS
// =================================================================

/**
 * Muestra sugerencias de productos basadas en un fragmento de nombre
 * y permite al usuario seleccionar uno.
 *
 * @return Producto seleccionado o null si se cancela
 */
private Producto buscarProductoConSugerencias() {
    System.out.print("\nIntroduce parte del nombre del producto: ");
    String fragmento = scanner.nextLine().toLowerCase();

    // Obtener productos que coinciden con el fragmento
    List<Producto> sugerencias = controlador.buscarProductosPorFragmento(fragmento);

    if (sugerencias.isEmpty()) {
        System.out.println("No se encontraron productos coincidentes.");
        return null;
    }

    // Agrupar sugerencias por nombre
    Map<String, List<String>> productosPorNombre = new LinkedHashMap<>();
    for (Producto p : sugerencias) {
        productosPorNombre
            .computeIfAbsent(p.getNombre(), k -> new ArrayList<>())
            .add(p.getMarca());
    }

    // Mostrar nombres únicos numerados
    System.out.println("\nProductos encontrados:");
    int index = 1;
    String[] nombres = new String[productosPorNombre.size()];
    for (String nombre : productosPorNombre.keySet()) {
        System.out.println(index + ". " + nombre);
        nombres[index-1] = nombre;
        index++;
    }

    // Selección de nombre
    System.out.print("\nSelecciona un producto (0 para cancelar): ");
    int opcionNombre = Integer.parseInt(scanner.nextLine());

    if (opcionNombre < 1 || opcionNombre > nombres.length) {
        return null;
    }

    String nombreSeleccionado = nombres[opcionNombre-1];
    List<String> marcas = productosPorNombre.get(nombreSeleccionado);

    // Si solo hay una marca, retornar directamente
    if (marcas.size() == 1) {
        return controlador.obtenerProductoPorNombreYMarca(nombreSeleccionado, marcas.get(0));
    }

    // Mostrar marcas disponibles para el producto seleccionado
    System.out.println("\nMarcas disponibles para " + nombreSeleccionado + ":");
    for (int i = 0; i < marcas.size(); i++) {
        System.out.println((i+1) + ". " + marcas.get(i));
    }

    // Selección de marca
    System.out.print("\nSelecciona una marca (0 para cancelar): ");
    int opcionMarca = Integer.parseInt(scanner.nextLine());

    if (opcionMarca < 1 || opcionMarca > marcas.size()) {
        return null;
    }

    return controlador.obtenerProductoPorNombreYMarca(nombreSeleccionado, marcas.get(opcionMarca-1));
}

// =================================================================
// MODIFICACIÓN DE MÉTODOS EXISTENTES PARA USAR EL NUEVO SISTEMA
// =================================================================

// Modificar seleccionarProducto()
private void seleccionarProducto() {
    System.out.println("\n=== SELECCIONAR PRODUCTO ===");
    Producto producto = buscarProductoConSugerencias();

    if (producto != null) {
        verDetalleProducto(producto);
    }
}

// Modificar anadirFavorito()
private void anadirFavorito() {
    System.out.println("\n=== AÑADIR A FAVORITOS ===");
    Producto producto = buscarProductoConSugerencias();

    if (producto != null) {
        controlador.anadirFavorito(usuarioActual, producto);
        System.out.println("¡Producto añadido a favoritos!");
    }
}

// Modificar eliminarFavorito()
private void eliminarFavorito() {
    System.out.println("\n=== ELIMINAR DE FAVORITOS ===");
    Producto producto = buscarProductoConSugerencias();

    if (producto != null) {
        controlador.eliminarFavorito(usuarioActual, producto);
        System.out.println("Producto eliminado de favoritos.");
    }
}

// Modificar métodos de stock
private void anadirProductoStock() {
    System.out.println("\n=== AÑADIR PRODUCTO AL STOCK ===");
    Producto producto = buscarProductoConSugerencias();

    if (producto != null) {
        System.out.print("Cantidad inicial: ");
        int cantidad = Integer.parseInt(scanner.nextLine());
        controlador.anadirProductoStock(unidadActual, producto, cantidad);
        System.out.println("Producto añadido al stock.");
    }
}

private void actualizarCantidadStock() {
    System.out.println("\n=== ACTUALIZAR CANTIDAD EN STOCK ===");
    Producto producto = buscarProductoConSugerencias();

    if (producto != null) {
        System.out.print("Nueva cantidad: ");
        int nuevaCantidad = Integer.parseInt(scanner.nextLine());
        controlador.actualizarCantidadStock(unidadActual, producto, nuevaCantidad);
        System.out.println("Cantidad actualizada.");
    }
}

private void eliminarProductoStock() {
    System.out.println("\n=== ELIMINAR PRODUCTO DEL STOCK ===");
    Producto producto = buscarProductoConSugerencias();

    if (producto != null) {
        controlador.eliminarProductoStock(unidadActual, producto);
        System.out.println("Producto eliminado del stock.");
    }
}

// ... [código existente] ...

// =================================================================
// MÉTODOS PARA BÚSQUEDA CON SUGERENCIAS
// =================================================================

/**
 * Busca productos cuyo nombre contenga el fragmento especificado
 */
public List<Producto> buscarProductosPorFragmento(String fragmento) {
    // Lógica para buscar productos que contengan el fragmento en su nombre
}

/**
 * Obtiene un producto específico por nombre y marca
 */
public Producto obtenerProductoPorNombreYMarca(String nombre, String marca) {
    // Lógica para obtener un producto específico
}




ejemplo exportacion lista compra (+puntuacionmedia+supermercado)
=== LISTA DE COMPRA ===
Unidad Familiar: Familia Pérez
Fecha: 05/06/2025 14:30
Total de productos: 4

PRODUCTO                      MARCA          CANTIDAD  PRECIO
------------------------------------------------------------
1. Leche Entera               Asturiana      2         2.20€
2. Pan Integral               Bimbo          1         1.50€
3. Manzanas Royal Gala        Mercadona      5         3.75€
4. Filete de Ternera          Carrefour      3        12.00€

------------------------------------------------------------
TOTAL ESTIMADO:                                    19.45€
